name: Laravel

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: ["8.2"]
        dependency-stability: [prefer-stable]

    name: P${{ matrix.php-versions }} - Laravel - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Set up environment variables
        run: |
          echo "DB_CONNECTION=mysql" >> $GITHUB_ENV
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_PORT=3306" >> $GITHUB_ENV
          echo "DB_DATABASE=sigres" >> $GITHUB_ENV
          echo "DB_USERNAME=sail" >> $GITHUB_ENV
          echo "DB_PASSWORD=password" >> $GITHUB_ENV
          echo "SESSION_DRIVER=file" >> $GITHUB_ENV

      - name: Validate Composer File
        run: composer validate --no-check-all

      - name: Install Dependencies (Laravel)
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: |
          composer config platform.php 8.2
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Check MySQL Service
        run: |
          sudo systemctl status mysql || true

      - name: Start MySQL Service if inactive
        run: |
          sudo systemctl is-active --quiet mysql || sudo systemctl start mysql

      - name: Wait for MySQL to start
        run: |
          while ! mysqladmin ping -h127.0.0.1 -u${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} --silent; do
            sleep 5
          done

      - name: Run Migrations
        env:
          SESSION_DRIVER: file
        run: php artisan migrate

      - name: Install Dependencies (Node.js)
        run: npm install

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: 'sigres'
        run: vendor/bin/pest --coverage-clover=clover.xml

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
